'use strict';

Object.defineProperty(exports, '__esModule', {
    value: true
});
var appRoot = require('app-root-path');
var Allure = require('allure-js-commons');
var Runtime = require('allure-js-commons/runtime');
var fs = require('fs');
var saveHistory = require('./save-history.js');
var deleteAllureData = require('./delete-allure-data').deleteAllureData;
var deleteVideos = require('./delete-allure-data').deleteVideos;
var deleteScreenshots = require('./delete-allure-data').deleteScreenshots;
var generateConfig = require('./generateConfig').generateConfig;
var path = require('path');

var allureReporter = new Allure();

global.allure = new Runtime(allureReporter);
var reporterConfig = undefined;

try {
    reporterConfig = require(appRoot.path + '/doc-allure-config');
} catch (err) {
    reporterConfig = {};
}

// Default configuration
allure.docAllureConfig = generateConfig(reporterConfig);

if (allure.docAllureConfig.COPY_HISTORY) {
    saveHistory(appRoot.path, allure.docAllureConfig);
}

allureReporter.setOptions({ targetDir: '' + appRoot.path + allure.docAllureConfig.RESULT_DIR });
var labels = allure.docAllureConfig.labels;

var errorConfig = {
    beforeHook: '- Error in test.before hook -\n',
    assertionError: 'AssertionError',
    brokenError: 'BrokenTest',
    brokenErrorMessage: allure.docAllureConfig.labels.brokenTestMessage || 'This test has been broken',
    testSkipMessage: allure.docAllureConfig.labels.skippedTestMessage || 'This test has been skipped.',
    testPassMessage: allure.docAllureConfig.labels.passedTestMessage || 'This test has been passed.',
    testUnstableMessage: allure.docAllureConfig.labels.unstableTestMessage || 'This test has been unstable.'
};

var testStatusConfig = {
    passed: 'passed',
    skipped: 'skipped',
    failed: 'failed',
    broken: 'failed',
    unstable: 'passed'
};

exports['default'] = function () {
    return {
        noColors: true,
        currentFixture: null,
        videos: [],
        videoMap: null,
        screenshotMap: null,

        report: {
            startTime: null,
            endTime: null, 
            totalTime: 0,
            testStartTime: null,
            userAgents: null,
            passed: 0,
            total: 0,
            skipped: 0,
            fixtures: [],
            warnings: []
        },

        reportTaskStart: function reportTaskStart(startTime, userAgents, testCount) {
            console.log(labels.allureStartMessage);
            this.report.startTime = startTime;
            this.report.userAgents = userAgents;
            this.report.total = testCount;
            deleteAllureData(appRoot.path, allure.docAllureConfig);
        },

        reportFixtureStart: function reportFixtureStart(name, path, meta) {
            this.currentFixture = { name: name, path: path, tests: [], meta: meta };
            this.report.fixtures.push(this.currentFixture);
           
        },

        formatErrorObject: function formatErrorObject(errorText) {
            var errorMessage = undefined;
            var errorName = undefined;

            if (errorText.indexOf(errorConfig.assertionError) !== -1) {
                errorName = errorConfig.assertionError;
                errorMessage = errorText.substring(0, errorText.indexOf('\n\n'));
            } else if (errorText.indexOf(errorConfig.beforeHook) !== -1) {
                errorName = errorConfig.beforeHook;
                errorMessage = errorText.substring(errorConfig.beforeHook.length, errorText.indexOf('\n\n'));
            } else {
                errorName = errorConfig.brokenError;
                errorMessage = errorConfig.brokenErrorMessage;
            }
            return { errorName: errorName, errorMessage: errorMessage };
        },
        getTestEndTime: function getTestEndTime(testDuration, testStartTime) {
            var testEndTime = testDuration + testStartTime;

            return testEndTime;
        },
        addEnvironment: function addEnvironment() {
            for(var i = 0; i < this.report.userAgents.length; i++){
                allure.addEnvironment(`Browser ${i+1}: `, this.report.userAgents[i])           
            }; 
        },
        addScreenshot: function addScreenshot(screenshotPath) {
            if (screenshotPath && fs.existsSync(screenshotPath)) {
                var img = fs.readFileSync(screenshotPath);
                allure.createAttachment(labels.screenshotLabel, new Buffer(img, 'base64'));
            }
        },
        addVideo: function addVideo(name) {      
            try{
            const videoOutput = allure.docAllureConfig.VIDEO_PATH
            const path1 = path.resolve(videoOutput);  // Part 1
            const dirs = fs.readdirSync(path1)
            const last = dirs[dirs.length-1] // pak de laatste (de meeste recente) video-map
            const path2 = path.join(path1, `${last}`, `${name}`) // Part 2
            const userAgent =  this.report.userAgents[0].replace(' / ',  '_').replace(' ', '_').replace(' ', '_')
            const videoPath = path.join(path2, userAgent, '1.mp4' ) // Part 3 volledig pad naar de juiste video.
       
            if(videoPath && fs.existsSync(videoPath)){ // Kijkt of het pad bestaat
                const video = fs.readFileSync(videoPath)
                allure.createAttachment(labels.videoLabel, video, 'video/mp4' ) // Voegt een video toe aan Allure
                
            }    
        }
            catch(error) {
                console.log(error)    
            }
        },
        addJiraLinks: function addJiraLinks(meta) {

            if (meta[allure.docAllureConfig.META.TEST_ID]) {
                var storyURL = allure.docAllureConfig.STORY_URL.replace('{{ID}}', meta[allure.docAllureConfig.META.TEST_ID]);

                if (storyURL) {
                    allure.addArgument(allure.docAllureConfig.STORY_LABEL, storyURL);
                }
            }
 
        },
        addFeatureInfo: function addFeatureInfo(meta, fixtureName) {
            var USER_STORY = this.currentFixture.meta && this.currentFixture.meta[allure.docAllureConfig.META.USER_STORY];

            if (!USER_STORY) {
                USER_STORY = meta && meta[allure.docAllureConfig.META.USER_STORY];
            }
            var userAgents = ""
            for (var i = 0; i < this.report.userAgents.length; i++) {
                userAgents += this.report.userAgents[i] + ", "
            }
            if (USER_STORY) {
                allure.feature(fixtureName);
                allure.story(USER_STORY);       
            }
            var MODULE = meta && meta[allure.docAllureConfig.META.MODULE];
            if(MODULE){
                allure.epic(MODULE);
            }
            var DESCRIPTION = this.currentFixture.meta && this.currentFixture.meta[allure.docAllureConfig.META.DESCRIPTION];

            if (!DESCRIPTION) {
                DESCRIPTION = meta && meta[allure.docAllureConfig.META.DESCRIPTION];
            }
            if (DESCRIPTION) {
                allure.description(DESCRIPTION)
            }
            var TAG = meta && meta[allure.docAllureConfig.META.TAG];
            if (TAG) {
                allure.addArgument(labels.tagLabel, TAG);
            }   
            var BLOK = meta && meta[allure.docAllureConfig.META.BLOK];
            if (BLOK) {
                allure.addArgument(labels.blokLabel, BLOK);
            }         
            var MODULE = this.currentFixture.meta && this.currentFixture.meta[allure.docAllureConfig.META.MODULE];
            if (!MODULE) {
                MODULE = meta && meta[allure.docAllureConfig.META.MODULE];
            }
            if (MODULE) {
                allure.addArgument(labels.moduleLabel, MODULE);
            }  
            allure.addArgument(labels.userAgentLabel, userAgents);
        },
        reportTestStart: function reportTestStart(name, meta) {
            this.report.testStartTime = Date.now() 
        },
        reportTestDone: function reportTestDone(name, testRunInfo, meta) {
            var _this = this;
            allureReporter.startSuite(this.currentFixture.name);      
            allureReporter.startCase(name, this.report.testStartTime);
            
                this.addEnvironment()
                this.addFeatureInfo(meta, this.currentFixture.name);
                allure.severity(meta[allure.docAllureConfig.META.SEVERITY]);
                this.addJiraLinks(meta);
                this.addVideo(name);
                
            var testEndTime = this.getTestEndTime(testRunInfo.durationMs, this.report.testStartTime);

            var formattedErrs = testRunInfo.errs.map(function (err) {
                return _this.formatError(err);
            });

            if (testRunInfo.skipped) {
                var testInfo = {
                    message: errorConfig.testSkipMessage,
                    stack: 'no error'
                };

                allureReporter.endCase(testStatusConfig.skipped, testInfo, testEndTime);
            }
            else if (testRunInfo.unstable) {
    
                var testInfo = {
                    message: errorConfig.testUnstableMessage,
                    stack: 'no error'
                };

                allureReporter.endCase(testStatusConfig.unstable, testInfo, testEndTime);
            }
            else if (!formattedErrs || !formattedErrs.length) {

                var testInfo = {
                    message: errorConfig.testPassMessage,
                    stack: 'no error'
                };

                allureReporter.endCase(testStatusConfig.passed, testInfo, testEndTime);
            }     
            else if (formattedErrs && formattedErrs.length) {
                var _formatErrorObject = this.formatErrorObject(formattedErrs[0]);

                var errorName = _formatErrorObject.errorName;
                var errorMessage = _formatErrorObject.errorMessage;

                var errorMsg = {
                    name: errorName,
                    message: errorMessage,
                    stack: formattedErrs[0]
                };
                var testCafeErrorObject = testRunInfo.errs[0];

                this.addScreenshot(testCafeErrorObject.screenshotPath);
                var testStatus = testStatusConfig.failed;

                if (errorName !== errorConfig.assertionError) {
                    testStatus = testStatusConfig.broken;
                }
                allureReporter.endCase(testStatus, errorMsg, testEndTime);
            }
           
            allureReporter.endSuite();    
        },

        reportTaskDone: function reportTaskDone(endTime, passed, warnings) {

            
            this.report.passed = passed;
            this.report.endTime = endTime;
            this.report.warnings = warnings; 
            try {
                deleteVideos();
                deleteScreenshots()
            }   
            catch(error){
                console.log(error)
            }    
            console.log(labels.allureClosedMessage);
        }
    };
};

module.exports = exports['default'];